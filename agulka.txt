import org.slf4j.LoggerFactory
import org.springframework.cache.Cache
import org.springframework.data.redis.cache.RedisCache
import org.springframework.data.redis.cache.RedisCacheConfiguration
import org.springframework.data.redis.cache.RedisCacheWriter

class LoggingRedisCache(
    name: String,
    cacheWriter: RedisCacheWriter,
    cacheConfig: RedisCacheConfiguration
) : RedisCache(name, cacheWriter, cacheConfig) {

    private val logger = LoggerFactory.getLogger(LoggingRedisCache::class.java)

    override fun get(key: Any): Cache.ValueWrapper? {
        val start = System.currentTimeMillis()
        val result = super.get(key)
        val duration = System.currentTimeMillis() - start

        if (result != null) {
            logger.info("Redis cache HIT for key '$key' in cache '$name' took ${duration}ms")
        } else {
            logger.info("Redis cache MISS for key '$key' in cache '$name' took ${duration}ms")
        }

        return result
    }
}

import org.springframework.data.redis.cache.RedisCacheManager
import org.springframework.data.redis.cache.RedisCacheWriter
import org.springframework.data.redis.cache.RedisCacheConfiguration
import org.springframework.cache.Cache

class LoggingRedisCacheManager(
    private val writer: RedisCacheWriter,
    private val defaultConfig: RedisCacheConfiguration
) : RedisCacheManager(writer, defaultConfig) {

    override fun createRedisCache(name: String, cacheConfig: RedisCacheConfiguration): Cache {
        return LoggingRedisCache(name, writer, cacheConfig)
    }
}

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.data.redis.connection.RedisConnectionFactory
import org.springframework.data.redis.cache.RedisCacheConfiguration

@Configuration
class CacheConfig {

    @Bean
    fun cacheManager(redisConnectionFactory: RedisConnectionFactory): LoggingRedisCacheManager {
        val writer = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory)
        val config = RedisCacheConfiguration.defaultCacheConfig()
        return LoggingRedisCacheManager(writer, config)
    }
}
