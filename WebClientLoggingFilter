import java.time.*
import java.time.format.DateTimeFormatter

fun getNextMidnightInUTC(timeZone: String): String {
    try {
        // Get the current date and time in the specified time zone
        val zoneId = ZoneId.of(timeZone)
        val now = ZonedDateTime.now(zoneId)

        // Calculate midnight of the next day in the specified time zone
        val nextMidnight = now.toLocalDate()
            .plusDays(1)
            .atStartOfDay(zoneId)

        // Convert the next midnight time to UTC
        val utcTime = nextMidnight.withZoneSameInstant(ZoneOffset.UTC)

        // Format the UTC time as a string
        return utcTime.format(DateTimeFormatter.ISO_INSTANT)
    } catch (e: Exception) {
        throw IllegalArgumentException("Invalid time zone provided: $timeZone")
    }
}

import java.time.*
import java.time.format.DateTimeFormatter

fun getNextMidnightInUTC(timeZone: String): String {
    try {
        // Get the current moment in UTC
        val now = Instant.now()

        // Convert to the given time zone
        val zoneId = ZoneId.of(timeZone)
        val zonedDateTime = now.atZone(zoneId)

        // Calculate midnight of the next day in the specified time zone
        val nextMidnight = zonedDateTime.toLocalDate()
            .plusDays(1)
            .atStartOfDay(zoneId)

        // Convert next midnight to an Instant
        val nextMidnightInstant = nextMidnight.toInstant()

        // Format the Instant as a UTC string
        return DateTimeFormatter.ISO_INSTANT.format(nextMidnightInstant)
    } catch (e: Exception) {
        throw IllegalArgumentException("Invalid time zone provided: $timeZone")
    }
}
